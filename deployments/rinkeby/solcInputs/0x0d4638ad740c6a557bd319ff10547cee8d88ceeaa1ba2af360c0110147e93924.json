{
  "language": "Solidity",
  "sources": {
    "temp-contracts/governance/GovernorAlpha.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"../interfaces/ITimelock.sol\";\r\n\r\n\r\ncontract GovernorAlpha {\r\n  /// @dev The name of this contract\r\n  string public constant name = \"Indexed Governor Alpha\";\r\n  \r\n  /// @dev The voting period which will be set after setVotingPeriodAfter has passed.\r\n  uint256 public constant permanentVotingPeriod = 17_280; // ~3 days in blocks (assuming 15s blocks)\r\n\r\n  /**\r\n   * @dev The number of votes in support of a proposal required in order for a\r\n   * quorum to be reached and for a vote to succeed\r\n   */ \r\n  function quorumVotes() public pure returns (uint256) {\r\n    return 400_000e18; // 4% of NDX\r\n  }\r\n\r\n  /**\r\n   * @dev The number of votes required in order for a voter to become a proposer\r\n   */\r\n  function proposalThreshold() public pure returns (uint256) {\r\n    return 100_000e18; // 1% of NDX\r\n  }\r\n\r\n  /**\r\n   * @dev The maximum number of actions that can be included in a proposal\r\n   */\r\n  function proposalMaxOperations() public pure returns (uint256) {\r\n    return 10;\r\n  }\r\n\r\n  /**\r\n   * @dev The delay before voting on a proposal may take place, once proposed\r\n   */\r\n  function votingDelay() public pure returns (uint256) {\r\n    return 1;\r\n  }\r\n\r\n  /**\r\n   * @dev The duration of voting on a proposal, in blocks\r\n   */\r\n  uint256 public votingPeriod = 2_880; // ~12 hours in blocks (assuming 15s blocks)\r\n\r\n  /**\r\n   * @dev The timestamp after which votingPeriod can be set to the permanent value.\r\n   */\r\n  uint256 public immutable setVotingPeriodAfter;\r\n\r\n  /**\r\n   * @dev The address of the Indexed Protocol Timelock\r\n   */\r\n  ITimelock public immutable timelock;\r\n\r\n  /**\r\n   * @dev The address of the Indexed governance token\r\n   */\r\n  NdxInterface public immutable ndx;\r\n\r\n  /**\r\n   * @dev The total number of proposals\r\n   */\r\n  uint256 public proposalCount;\r\n\r\n  /**\r\n   * @param id Unique id for looking up a proposal\r\n   * @param proposer Creator of the proposal\r\n   * @param eta The timestamp that the proposal will be available for execution, set once the vote succeeds\r\n   * @param targets The ordered list of target addresses for calls to be made\r\n   * @param values The ordered list of values (i.e. msg.value) to be passed to the calls to be made\r\n   * @param signatures The ordered list of function signatures to be called\r\n   * @param calldatas The ordered list of calldata to be passed to each call\r\n   * @param startBlock The block at which voting begins: holders must delegate their votes prior to this block\r\n   * @param endBlock The block at which voting ends: votes must be cast prior to this block\r\n   * @param forVotes Current number of votes in favor of this proposal\r\n   * @param againstVotes Current number of votes in opposition to this proposal\r\n   * @param canceled Flag marking whether the proposal has been canceled\r\n   * @param executed Flag marking whether the proposal has been executed\r\n   * @param receipts Receipts of ballots for the entire set of voters\r\n   */\r\n  struct Proposal {\r\n    uint256 id;\r\n    address proposer;\r\n    uint256 eta;\r\n    address[] targets;\r\n    uint256[] values;\r\n    string[] signatures;\r\n    bytes[] calldatas;\r\n    uint256 startBlock;\r\n    uint256 endBlock;\r\n    uint256 forVotes;\r\n    uint256 againstVotes;\r\n    bool canceled;\r\n    bool executed;\r\n    mapping(address => Receipt) receipts;\r\n  }\r\n\r\n  /**\r\n   * @dev Ballot receipt record for a voter\r\n   * @param hasVoted Whether or not a vote has been cast\r\n   * @param support Whether or not the voter supports the proposal\r\n   * @param votes The number of votes the voter had, which were cast\r\n   */\r\n  struct Receipt {\r\n    bool hasVoted;\r\n    bool support;\r\n    uint96 votes;\r\n  }\r\n\r\n  /**\r\n   * @dev Possible states that a proposal may be in\r\n   */\r\n  enum ProposalState {\r\n    Pending,\r\n    Active,\r\n    Canceled,\r\n    Defeated,\r\n    Succeeded,\r\n    Queued,\r\n    Expired,\r\n    Executed\r\n  }\r\n\r\n  /**\r\n   * @dev The official record of all proposals ever proposed\r\n   */\r\n  mapping(uint256 => Proposal) public proposals;\r\n\r\n  /**\r\n   * @dev The latest proposal for each proposer\r\n   */\r\n  mapping(address => uint256) public latestProposalIds;\r\n\r\n  /**\r\n   * @dev The EIP-712 typehash for the contract's domain\r\n   */\r\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\r\n    \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n  );\r\n\r\n  /**\r\n   * @dev The EIP-712 typehash for the ballot struct used by the contract\r\n   */\r\n  bytes32 public constant BALLOT_TYPEHASH = keccak256(\r\n    \"Ballot(uint256 proposalId,bool support)\"\r\n  );\r\n\r\n  /**\r\n   * @dev An event emitted when a new proposal is created\r\n   */\r\n  event ProposalCreated(\r\n    uint256 id,\r\n    address proposer,\r\n    address[] targets,\r\n    uint256[] values,\r\n    string[] signatures,\r\n    bytes[] calldatas,\r\n    uint256 startBlock,\r\n    uint256 endBlock,\r\n    string description\r\n  );\r\n\r\n  /**\r\n   * @dev An event emitted when a vote has been cast on a proposal\r\n   */\r\n  event VoteCast(\r\n    address voter,\r\n    uint256 proposalId,\r\n    bool support,\r\n    uint256 votes\r\n  );\r\n\r\n  /**\r\n   * @dev An event emitted when a proposal has been canceled\r\n   */\r\n  event ProposalCanceled(uint256 id);\r\n\r\n  /**\r\n   * @dev An event emitted when a proposal has been queued in the Timelock\r\n   */\r\n  event ProposalQueued(uint256 id, uint256 eta);\r\n\r\n  /**\r\n   * @dev An event emitted when a proposal has been executed in the Timelock\r\n   */\r\n  event ProposalExecuted(uint256 id);\r\n\r\n  constructor(address timelock_, address ndx_, uint256 setVotingPeriodAfter_) public {\r\n    timelock = ITimelock(timelock_);\r\n    ndx = NdxInterface(ndx_);\r\n    setVotingPeriodAfter = setVotingPeriodAfter_;\r\n  }\r\n\r\n  /**\r\n   * @dev Sets votingPeriod to the permanent value.\r\n   * Can only be called after setVotingPeriodAfter\r\n   */\r\n  function setPermanentVotingPeriod() external {\r\n    require(\r\n      block.timestamp >= setVotingPeriodAfter,\r\n      \"GovernorAlpha::setPermanentVotingPeriod: setting permanent voting period not allowed yet\"\r\n    );\r\n    votingPeriod = permanentVotingPeriod;\r\n  }\r\n\r\n  function propose(\r\n    address[] memory targets,\r\n    uint256[] memory values,\r\n    string[] memory signatures,\r\n    bytes[] memory calldatas,\r\n    string memory description\r\n  ) public returns (uint256) {\r\n    require(\r\n      ndx.getPriorVotes(msg.sender, sub256(block.number, 1)) >\r\n        proposalThreshold(),\r\n      \"GovernorAlpha::propose: proposer votes below proposal threshold\"\r\n    );\r\n    require(\r\n      targets.length == values.length &&\r\n        targets.length == signatures.length &&\r\n        targets.length == calldatas.length,\r\n      \"GovernorAlpha::propose: proposal function information arity mismatch\"\r\n    );\r\n    require(\r\n      targets.length != 0,\r\n      \"GovernorAlpha::propose: must provide actions\"\r\n    );\r\n    require(\r\n      targets.length <= proposalMaxOperations(),\r\n      \"GovernorAlpha::propose: too many actions\"\r\n    );\r\n\r\n    uint256 latestProposalId = latestProposalIds[msg.sender];\r\n    if (latestProposalId != 0) {\r\n      ProposalState proposersLatestProposalState = state(latestProposalId);\r\n      require(\r\n        proposersLatestProposalState != ProposalState.Active,\r\n        \"GovernorAlpha::propose: one live proposal per proposer, found an already active proposal\"\r\n      );\r\n      require(\r\n        proposersLatestProposalState != ProposalState.Pending,\r\n        \"GovernorAlpha::propose: one live proposal per proposer, found an already pending proposal\"\r\n      );\r\n    }\r\n\r\n    uint256 startBlock = add256(block.number, votingDelay());\r\n    uint256 endBlock = add256(startBlock, votingPeriod);\r\n\r\n    proposalCount++;\r\n    Proposal memory newProposal = Proposal({\r\n      id: proposalCount,\r\n      proposer: msg.sender,\r\n      eta: 0,\r\n      targets: targets,\r\n      values: values,\r\n      signatures: signatures,\r\n      calldatas: calldatas,\r\n      startBlock: startBlock,\r\n      endBlock: endBlock,\r\n      forVotes: 0,\r\n      againstVotes: 0,\r\n      canceled: false,\r\n      executed: false\r\n    });\r\n\r\n    proposals[newProposal.id] = newProposal;\r\n    latestProposalIds[newProposal.proposer] = newProposal.id;\r\n\r\n    emit ProposalCreated(\r\n      newProposal.id,\r\n      msg.sender,\r\n      targets,\r\n      values,\r\n      signatures,\r\n      calldatas,\r\n      startBlock,\r\n      endBlock,\r\n      description\r\n    );\r\n    return newProposal.id;\r\n  }\r\n\r\n  function queue(uint256 proposalId) public {\r\n    require(\r\n      state(proposalId) == ProposalState.Succeeded,\r\n      \"GovernorAlpha::queue: proposal can only be queued if it is succeeded\"\r\n    );\r\n    Proposal storage proposal = proposals[proposalId];\r\n    uint256 eta = add256(block.timestamp, timelock.delay());\r\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n      _queueOrRevert(\r\n        proposal.targets[i],\r\n        proposal.values[i],\r\n        proposal.signatures[i],\r\n        proposal.calldatas[i],\r\n        eta\r\n      );\r\n    }\r\n    proposal.eta = eta;\r\n    emit ProposalQueued(proposalId, eta);\r\n  }\r\n\r\n  function _queueOrRevert(\r\n    address target,\r\n    uint256 value,\r\n    string memory signature,\r\n    bytes memory data,\r\n    uint256 eta\r\n  ) internal {\r\n    require(\r\n      !timelock.queuedTransactions(\r\n        keccak256(abi.encode(target, value, signature, data, eta))\r\n      ),\r\n      \"GovernorAlpha::_queueOrRevert: proposal action already queued at eta\"\r\n    );\r\n    timelock.queueTransaction(target, value, signature, data, eta);\r\n  }\r\n\r\n  function execute(uint256 proposalId) public payable {\r\n    require(\r\n      state(proposalId) == ProposalState.Queued,\r\n      \"GovernorAlpha::execute: proposal can only be executed if it is queued\"\r\n    );\r\n    Proposal storage proposal = proposals[proposalId];\r\n    proposal.executed = true;\r\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n      timelock.executeTransaction.value(proposal.values[i])(\r\n        proposal.targets[i],\r\n        proposal.values[i],\r\n        proposal.signatures[i],\r\n        proposal.calldatas[i],\r\n        proposal.eta\r\n      );\r\n    }\r\n    emit ProposalExecuted(proposalId);\r\n  }\r\n\r\n  function cancel(uint256 proposalId) public {\r\n    ProposalState state = state(proposalId);\r\n    require(\r\n      state != ProposalState.Executed,\r\n      \"GovernorAlpha::cancel: cannot cancel executed proposal\"\r\n    );\r\n\r\n    Proposal storage proposal = proposals[proposalId];\r\n    require(\r\n      ndx.getPriorVotes(proposal.proposer, sub256(block.number, 1)) <\r\n        proposalThreshold(),\r\n      \"GovernorAlpha::cancel: proposer above threshold\"\r\n    );\r\n\r\n    proposal.canceled = true;\r\n    for (uint256 i = 0; i < proposal.targets.length; i++) {\r\n      timelock.cancelTransaction(\r\n        proposal.targets[i],\r\n        proposal.values[i],\r\n        proposal.signatures[i],\r\n        proposal.calldatas[i],\r\n        proposal.eta\r\n      );\r\n    }\r\n\r\n    emit ProposalCanceled(proposalId);\r\n  }\r\n\r\n  function getActions(uint256 proposalId)\r\n    public\r\n    view\r\n    returns (\r\n      address[] memory targets,\r\n      uint256[] memory values,\r\n      string[] memory signatures,\r\n      bytes[] memory calldatas\r\n    )\r\n  {\r\n    Proposal storage p = proposals[proposalId];\r\n    return (p.targets, p.values, p.signatures, p.calldatas);\r\n  }\r\n\r\n  function getReceipt(uint256 proposalId, address voter)\r\n    public\r\n    view\r\n    returns (Receipt memory)\r\n  {\r\n    return proposals[proposalId].receipts[voter];\r\n  }\r\n\r\n  function state(uint256 proposalId) public view returns (ProposalState) {\r\n    require(\r\n      proposalCount >= proposalId && proposalId > 0,\r\n      \"GovernorAlpha::state: invalid proposal id\"\r\n    );\r\n    Proposal storage proposal = proposals[proposalId];\r\n    if (proposal.canceled) {\r\n      return ProposalState.Canceled;\r\n    } else if (block.number <= proposal.startBlock) {\r\n      return ProposalState.Pending;\r\n    } else if (block.number <= proposal.endBlock) {\r\n      return ProposalState.Active;\r\n    } else if (\r\n      proposal.forVotes <= proposal.againstVotes ||\r\n      proposal.forVotes < quorumVotes()\r\n    ) {\r\n      return ProposalState.Defeated;\r\n    } else if (proposal.eta == 0) {\r\n      return ProposalState.Succeeded;\r\n    } else if (proposal.executed) {\r\n      return ProposalState.Executed;\r\n    } else if (\r\n      block.timestamp >= add256(proposal.eta, timelock.GRACE_PERIOD())\r\n    ) {\r\n      return ProposalState.Expired;\r\n    } else {\r\n      return ProposalState.Queued;\r\n    }\r\n  }\r\n\r\n  function castVote(uint256 proposalId, bool support) public {\r\n    return _castVote(msg.sender, proposalId, support);\r\n  }\r\n\r\n  function castVoteBySig(\r\n    uint256 proposalId,\r\n    bool support,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) public {\r\n    bytes32 domainSeparator = keccak256(\r\n      abi.encode(\r\n        DOMAIN_TYPEHASH,\r\n        keccak256(bytes(name)),\r\n        getChainId(),\r\n        address(this)\r\n      )\r\n    );\r\n    bytes32 structHash = keccak256(\r\n      abi.encode(BALLOT_TYPEHASH, proposalId, support)\r\n    );\r\n    bytes32 digest = keccak256(\r\n      abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n    );\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(\r\n      signatory != address(0),\r\n      \"GovernorAlpha::castVoteBySig: invalid signature\"\r\n    );\r\n    return _castVote(signatory, proposalId, support);\r\n  }\r\n\r\n  function _castVote(\r\n    address voter,\r\n    uint256 proposalId,\r\n    bool support\r\n  ) internal {\r\n    require(\r\n      state(proposalId) == ProposalState.Active,\r\n      \"GovernorAlpha::_castVote: voting is closed\"\r\n    );\r\n    Proposal storage proposal = proposals[proposalId];\r\n    Receipt storage receipt = proposal.receipts[voter];\r\n    require(\r\n      receipt.hasVoted == false,\r\n      \"GovernorAlpha::_castVote: voter already voted\"\r\n    );\r\n    uint96 votes = ndx.getPriorVotes(voter, proposal.startBlock);\r\n\r\n    if (support) {\r\n      proposal.forVotes = add256(proposal.forVotes, votes);\r\n    } else {\r\n      proposal.againstVotes = add256(proposal.againstVotes, votes);\r\n    }\r\n\r\n    receipt.hasVoted = true;\r\n    receipt.support = support;\r\n    receipt.votes = votes;\r\n\r\n    emit VoteCast(voter, proposalId, support, votes);\r\n  }\r\n\r\n  function add256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    uint256 c = a + b;\r\n    require(c >= a, \"addition overflow\");\r\n    return c;\r\n  }\r\n\r\n  function sub256(uint256 a, uint256 b) internal pure returns (uint256) {\r\n    require(b <= a, \"subtraction underflow\");\r\n    return a - b;\r\n  }\r\n\r\n  function getChainId() internal pure returns (uint256) {\r\n    uint256 chainId;\r\n    assembly {\r\n      chainId := chainid()\r\n    }\r\n    return chainId;\r\n  }\r\n}\r\n\r\ninterface NdxInterface {\r\n  function getPriorVotes(address account, uint256 blockNumber)\r\n    external\r\n    view\r\n    returns (uint96);\r\n}\r\n"
    },
    "temp-contracts/interfaces/ITimelock.sol": {
      "content": "pragma solidity ^0.6.0;\r\n\r\n\r\ninterface ITimelock {\r\n  event NewAdmin(address indexed newAdmin);\r\n  event NewPendingAdmin(address indexed newPendingAdmin);\r\n  event NewDelay(uint256 indexed newDelay);\r\n  event CancelTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n  event ExecuteTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n  event QueueTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n\r\n  function GRACE_PERIOD() external pure returns (uint256);\r\n  \r\n  function MINIMUM_DELAY() external pure returns (uint256);\r\n  \r\n  function MAXIMUM_DELAY() external pure returns (uint256);\r\n\r\n  function admin() external view returns (address);\r\n\r\n  function pendingAdmin() external view returns (address);\r\n\r\n  function delay() external view returns (uint256);\r\n\r\n  function queuedTransactions(bytes32) external view returns (bool);\r\n\r\n  function setDelay(uint256 delay_) external;\r\n\r\n  function acceptAdmin() external;\r\n\r\n  function setPendingAdmin(address pendingAdmin_) external;\r\n\r\n  function queueTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external returns (bytes32);\r\n\r\n  function cancelTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external;\r\n\r\n  function executeTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string calldata signature,\r\n    bytes calldata data,\r\n    uint256 eta\r\n  ) external payable returns (bytes memory);\r\n}\r\n"
    },
    "temp-contracts/governance/Ndx.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\npragma experimental ABIEncoderV2;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\n\r\ncontract Ndx {\r\n  /// @notice EIP-20 token name for this token\r\n  string public constant name = \"Indexed\";\r\n\r\n  /// @notice EIP-20 token symbol for this token\r\n  string public constant symbol = \"NDX\";\r\n\r\n  /// @notice EIP-20 token decimals for this token\r\n  uint8 public constant decimals = 18;\r\n\r\n  /// @notice Address which may mint new tokens\r\n  address public minter;\r\n\r\n  /// @notice The timestamp after which minting may occur\r\n  uint256 public mintingAllowedAfter;\r\n\r\n  /// @notice Cap on the percentage of totalSupply that can be minted at each mint\r\n  uint8 public constant mintCap = 10;\r\n\r\n  /// @notice Minimum time between mints\r\n  uint32 public constant minimumTimeBetweenMints = 90 days;\r\n\r\n  /// @notice Total number of tokens in circulation\r\n  uint256 public totalSupply = 10_000_000e18;\r\n\r\n  mapping(address => mapping(address => uint96)) internal allowances;\r\n\r\n  mapping(address => uint96) internal balances;\r\n\r\n  mapping(address => address) public delegates;\r\n\r\n  struct Checkpoint {\r\n    uint32 fromBlock;\r\n    uint96 votes;\r\n  }\r\n\r\n  mapping(address => mapping(uint32 => Checkpoint)) public checkpoints;\r\n\r\n  mapping(address => uint32) public numCheckpoints;\r\n\r\n  bytes32 public constant DOMAIN_TYPEHASH = keccak256(\r\n    \"EIP712Domain(string name,uint256 chainId,address verifyingContract)\"\r\n  );\r\n\r\n  bytes32 public constant DELEGATION_TYPEHASH = keccak256(\r\n    \"Delegation(address delegatee,uint256 nonce,uint256 expiry)\"\r\n  );\r\n\r\n  bytes32 public constant PERMIT_TYPEHASH = keccak256(\r\n    \"Permit(address owner,address spender,uint256 value,uint256 nonce,uint256 deadline)\"\r\n  );\r\n\r\n  mapping(address => uint256) public nonces;\r\n\r\n  /// @notice An event thats emitted when the minter address is changed\r\n  event MinterChanged(address minter, address newMinter);\r\n\r\n  event DelegateChanged(\r\n    address indexed delegator,\r\n    address indexed fromDelegate,\r\n    address indexed toDelegate\r\n  );\r\n\r\n  event DelegateVotesChanged(\r\n    address indexed delegate,\r\n    uint256 previousBalance,\r\n    uint256 newBalance\r\n  );\r\n\r\n  event Transfer(address indexed from, address indexed to, uint256 amount);\r\n\r\n  event Approval(\r\n    address indexed owner,\r\n    address indexed spender,\r\n    uint256 amount\r\n  );\r\n\r\n  constructor(address account, address minter_, uint256 mintingAllowedAfter_) public {\r\n    require(\r\n      mintingAllowedAfter_ >= block.timestamp,\r\n      \"Ndx::constructor: minting can only begin after deployment\"\r\n    );\r\n    balances[account] = uint96(totalSupply);\r\n    emit Transfer(address(0), account, totalSupply);\r\n    minter = minter_;\r\n    emit MinterChanged(address(0), minter);\r\n    mintingAllowedAfter = mintingAllowedAfter_;\r\n  }\r\n\r\n  /**\r\n   * @notice Change the minter address\r\n   * @param minter_ The address of the new minter\r\n   */\r\n  function setMinter(address minter_) external {\r\n    require(msg.sender == minter, \"Ndx::setMinter: only the minter can change the minter address\");\r\n    emit MinterChanged(minter, minter_);\r\n    minter = minter_;\r\n  }\r\n\r\n  /**\r\n   * @notice Mint new tokens\r\n   * @param dst The address of the destination account\r\n   * @param rawAmount The number of tokens to be minted\r\n   */\r\n  function mint(address dst, uint rawAmount) external {\r\n    require(msg.sender == minter, \"Ndx::mint: only the minter can mint\");\r\n    require(block.timestamp >= mintingAllowedAfter, \"Ndx::mint: minting not allowed yet\");\r\n    require(dst != address(0), \"Ndx::mint: cannot transfer to the zero address\");\r\n\r\n    // record the mint\r\n    mintingAllowedAfter = SafeMath.add(block.timestamp, minimumTimeBetweenMints);\r\n\r\n    // mint the amount\r\n    uint96 amount = safe96(rawAmount, \"Ndx::mint: amount exceeds 96 bits\");\r\n    require(amount <= SafeMath.div(SafeMath.mul(totalSupply, mintCap), 100), \"Ndx::mint: exceeded mint cap\");\r\n    totalSupply = safe96(SafeMath.add(totalSupply, amount), \"Ndx::mint: totalSupply exceeds 96 bits\");\r\n\r\n    // transfer the amount to the recipient\r\n    balances[dst] = add96(balances[dst], amount, \"Ndx::mint: transfer amount overflows\");\r\n    emit Transfer(address(0), dst, amount);\r\n\r\n    // move delegates\r\n    _moveDelegates(address(0), delegates[dst], amount);\r\n  }\r\n\r\n  function allowance(address account, address spender)\r\n    external\r\n    view\r\n    returns (uint256)\r\n  {\r\n    return allowances[account][spender];\r\n  }\r\n\r\n  function approve(address spender, uint256 rawAmount) external returns (bool) {\r\n    uint96 amount;\r\n    if (rawAmount == uint256(-1)) {\r\n      amount = uint96(-1);\r\n    } else {\r\n      amount = safe96(rawAmount, \"Ndx::approve: amount exceeds 96 bits\");\r\n    }\r\n\r\n    allowances[msg.sender][spender] = amount;\r\n\r\n    emit Approval(msg.sender, spender, amount);\r\n    return true;\r\n  }\r\n\r\n  function permit(\r\n    address owner,\r\n    address spender,\r\n    uint256 rawAmount,\r\n    uint256 deadline,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) external {\r\n    uint96 amount;\r\n    if (rawAmount == uint256(-1)) {\r\n      amount = uint96(-1);\r\n    } else {\r\n      amount = safe96(rawAmount, \"Ndx::permit: amount exceeds 96 bits\");\r\n    }\r\n\r\n    bytes32 domainSeparator = keccak256(\r\n      abi.encode(\r\n        DOMAIN_TYPEHASH,\r\n        keccak256(bytes(name)),\r\n        getChainId(),\r\n        address(this)\r\n      )\r\n    );\r\n    bytes32 structHash = keccak256(\r\n      abi.encode(\r\n        PERMIT_TYPEHASH,\r\n        owner,\r\n        spender,\r\n        rawAmount,\r\n        nonces[owner]++,\r\n        deadline\r\n      )\r\n    );\r\n    bytes32 digest = keccak256(\r\n      abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n    );\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), \"Ndx::permit: invalid signature\");\r\n    require(signatory == owner, \"Ndx::permit: unauthorized\");\r\n    require(now <= deadline, \"Ndx::permit: signature expired\");\r\n\r\n    allowances[owner][spender] = amount;\r\n\r\n    emit Approval(owner, spender, amount);\r\n  }\r\n\r\n  function balanceOf(address account) external view returns (uint256) {\r\n    return balances[account];\r\n  }\r\n\r\n  function nonceOf(address account) external view returns (uint256) {\r\n    return nonces[account];\r\n  }\r\n\r\n  function transfer(address dst, uint256 rawAmount) external returns (bool) {\r\n    uint96 amount = safe96(rawAmount, \"Ndx::transfer: amount exceeds 96 bits\");\r\n    _transferTokens(msg.sender, dst, amount);\r\n    return true;\r\n  }\r\n\r\n  function transferFrom(\r\n    address src,\r\n    address dst,\r\n    uint256 rawAmount\r\n  ) external returns (bool) {\r\n    address spender = msg.sender;\r\n    uint96 spenderAllowance = allowances[src][spender];\r\n    uint96 amount = safe96(rawAmount, \"Ndx::approve: amount exceeds 96 bits\");\r\n\r\n    if (spender != src && spenderAllowance != uint96(-1)) {\r\n      uint96 newAllowance = sub96(\r\n        spenderAllowance,\r\n        amount,\r\n        \"Ndx::transferFrom: transfer amount exceeds spender allowance\"\r\n      );\r\n      allowances[src][spender] = newAllowance;\r\n\r\n      emit Approval(src, spender, newAllowance);\r\n    }\r\n\r\n    _transferTokens(src, dst, amount);\r\n    return true;\r\n  }\r\n\r\n  function delegate(address delegatee) public {\r\n    return _delegate(msg.sender, delegatee);\r\n  }\r\n\r\n  function delegateBySig(\r\n    address delegatee,\r\n    uint256 nonce,\r\n    uint256 expiry,\r\n    uint8 v,\r\n    bytes32 r,\r\n    bytes32 s\r\n  ) public {\r\n    bytes32 domainSeparator = keccak256(\r\n      abi.encode(\r\n        DOMAIN_TYPEHASH,\r\n        keccak256(bytes(name)),\r\n        getChainId(),\r\n        address(this)\r\n      )\r\n    );\r\n    bytes32 structHash = keccak256(\r\n      abi.encode(DELEGATION_TYPEHASH, delegatee, nonce, expiry)\r\n    );\r\n    bytes32 digest = keccak256(\r\n      abi.encodePacked(\"\\x19\\x01\", domainSeparator, structHash)\r\n    );\r\n    address signatory = ecrecover(digest, v, r, s);\r\n    require(signatory != address(0), \"Ndx::delegateBySig: invalid signature\");\r\n    require(nonce == nonces[signatory]++, \"Ndx::delegateBySig: invalid nonce\");\r\n    require(now <= expiry, \"Ndx::delegateBySig: signature expired\");\r\n    return _delegate(signatory, delegatee);\r\n  }\r\n\r\n  function getCurrentVotes(address account) external view returns (uint96) {\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    return nCheckpoints > 0 ? checkpoints[account][nCheckpoints - 1].votes : 0;\r\n  }\r\n\r\n  function getPriorVotes(address account, uint256 blockNumber)\r\n    public\r\n    view\r\n    returns (uint96)\r\n  {\r\n    require(\r\n      blockNumber < block.number,\r\n      \"Ndx::getPriorVotes: not yet determined\"\r\n    );\r\n\r\n    uint32 nCheckpoints = numCheckpoints[account];\r\n    if (nCheckpoints == 0) {\r\n      return 0;\r\n    }\r\n\r\n    if (checkpoints[account][nCheckpoints - 1].fromBlock <= blockNumber) {\r\n      return checkpoints[account][nCheckpoints - 1].votes;\r\n    }\r\n\r\n    if (checkpoints[account][0].fromBlock > blockNumber) {\r\n      return 0;\r\n    }\r\n\r\n    uint32 lower = 0;\r\n    uint32 upper = nCheckpoints - 1;\r\n    while (upper > lower) {\r\n      uint32 center = upper - (upper - lower) / 2;\r\n      Checkpoint memory cp = checkpoints[account][center];\r\n      if (cp.fromBlock == blockNumber) {\r\n        return cp.votes;\r\n      } else if (cp.fromBlock < blockNumber) {\r\n        lower = center;\r\n      } else {\r\n        upper = center - 1;\r\n      }\r\n    }\r\n    return checkpoints[account][lower].votes;\r\n  }\r\n\r\n  function _delegate(address delegator, address delegatee) internal {\r\n    address currentDelegate = delegates[delegator];\r\n    uint96 delegatorBalance = balances[delegator];\r\n    delegates[delegator] = delegatee;\r\n\r\n    emit DelegateChanged(delegator, currentDelegate, delegatee);\r\n\r\n    _moveDelegates(currentDelegate, delegatee, delegatorBalance);\r\n  }\r\n\r\n  function _transferTokens(\r\n    address src,\r\n    address dst,\r\n    uint96 amount\r\n  ) internal {\r\n    require(\r\n      src != address(0),\r\n      \"Ndx::_transferTokens: cannot transfer from the zero address\"\r\n    );\r\n    require(\r\n      dst != address(0),\r\n      \"Ndx::_transferTokens: cannot transfer to the zero address\"\r\n    );\r\n\r\n    balances[src] = sub96(\r\n      balances[src],\r\n      amount,\r\n      \"Ndx::_transferTokens: transfer amount exceeds balance\"\r\n    );\r\n    balances[dst] = add96(\r\n      balances[dst],\r\n      amount,\r\n      \"Ndx::_transferTokens: transfer amount overflows\"\r\n    );\r\n    emit Transfer(src, dst, amount);\r\n\r\n    _moveDelegates(delegates[src], delegates[dst], amount);\r\n  }\r\n\r\n  function _moveDelegates(\r\n    address srcRep,\r\n    address dstRep,\r\n    uint96 amount\r\n  ) internal {\r\n    if (srcRep != dstRep && amount > 0) {\r\n      if (srcRep != address(0)) {\r\n        uint32 srcRepNum = numCheckpoints[srcRep];\r\n        uint96 srcRepOld = srcRepNum > 0\r\n          ? checkpoints[srcRep][srcRepNum - 1].votes\r\n          : 0;\r\n        uint96 srcRepNew = sub96(\r\n          srcRepOld,\r\n          amount,\r\n          \"Ndx::_moveVotes: vote amount underflows\"\r\n        );\r\n        _writeCheckpoint(srcRep, srcRepNum, srcRepOld, srcRepNew);\r\n      }\r\n\r\n      if (dstRep != address(0)) {\r\n        uint32 dstRepNum = numCheckpoints[dstRep];\r\n        uint96 dstRepOld = dstRepNum > 0\r\n          ? checkpoints[dstRep][dstRepNum - 1].votes\r\n          : 0;\r\n        uint96 dstRepNew = add96(\r\n          dstRepOld,\r\n          amount,\r\n          \"Ndx::_moveVotes: vote amount overflows\"\r\n        );\r\n        _writeCheckpoint(dstRep, dstRepNum, dstRepOld, dstRepNew);\r\n      }\r\n    }\r\n  }\r\n\r\n  function _writeCheckpoint(\r\n    address delegatee,\r\n    uint32 nCheckpoints,\r\n    uint96 oldVotes,\r\n    uint96 newVotes\r\n  ) internal {\r\n    uint32 blockNumber = safe32(\r\n      block.number,\r\n      \"Ndx::_writeCheckpoint: block number exceeds 32 bits\"\r\n    );\r\n\r\n    if (\r\n      nCheckpoints > 0 &&\r\n      checkpoints[delegatee][nCheckpoints - 1].fromBlock == blockNumber\r\n    ) {\r\n      checkpoints[delegatee][nCheckpoints - 1].votes = newVotes;\r\n    } else {\r\n      checkpoints[delegatee][nCheckpoints] = Checkpoint(blockNumber, newVotes);\r\n      numCheckpoints[delegatee] = nCheckpoints + 1;\r\n    }\r\n\r\n    emit DelegateVotesChanged(delegatee, oldVotes, newVotes);\r\n  }\r\n\r\n  function safe32(uint256 n, string memory errorMessage)\r\n    internal\r\n    pure\r\n    returns (uint32)\r\n  {\r\n    require(n < 2**32, errorMessage);\r\n    return uint32(n);\r\n  }\r\n\r\n  function safe96(uint256 n, string memory errorMessage)\r\n    internal\r\n    pure\r\n    returns (uint96)\r\n  {\r\n    require(n < 2**96, errorMessage);\r\n    return uint96(n);\r\n  }\r\n\r\n  function add96(\r\n    uint96 a,\r\n    uint96 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint96) {\r\n    uint96 c = a + b;\r\n    require(c >= a, errorMessage);\r\n    return c;\r\n  }\r\n\r\n  function sub96(\r\n    uint96 a,\r\n    uint96 b,\r\n    string memory errorMessage\r\n  ) internal pure returns (uint96) {\r\n    require(b <= a, errorMessage);\r\n    return a - b;\r\n  }\r\n\r\n  function getChainId() internal pure returns (uint256) {\r\n    uint256 chainId;\r\n    assembly {\r\n      chainId := chainid()\r\n    }\r\n    return chainId;\r\n  }\r\n}\r\n"
    },
    "@openzeppelin/contracts/math/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity >=0.6.0 <0.8.0;\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\n * checks.\n *\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\n * in bugs, because programmers usually assume that an overflow raises an\n * error, which is the standard behavior in high level programming languages.\n * `SafeMath` restores this intuition by reverting the transaction when an\n * operation overflows.\n *\n * Using this library instead of the unchecked operations eliminates an entire\n * class of bugs, so it's recommended to use it always.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        uint256 c = a + b;\n        if (c < a) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b > a) return (false, 0);\n        return (true, a - b);\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n        // benefit is lost if 'b' is also tested.\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n        if (a == 0) return (true, 0);\n        uint256 c = a * b;\n        if (c / a != b) return (false, 0);\n        return (true, c);\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a / b);\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        if (b == 0) return (false, 0);\n        return (true, a % b);\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        uint256 c = a + b;\n        require(c >= a, \"SafeMath: addition overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b <= a, \"SafeMath: subtraction overflow\");\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        if (a == 0) return 0;\n        uint256 c = a * b;\n        require(c / a == b, \"SafeMath: multiplication overflow\");\n        return c;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: division by zero\");\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        require(b > 0, \"SafeMath: modulo by zero\");\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b <= a, errorMessage);\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\n        require(b > 0, errorMessage);\n        return a % b;\n    }\n}\n"
    },
    "temp-contracts/governance/Timelock.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.6.0;\r\n\r\nimport \"@openzeppelin/contracts/math/SafeMath.sol\";\r\n\r\nimport \"../interfaces/ITimelock.sol\";\r\n\r\n\r\ncontract Timelock is ITimelock {\r\n  using SafeMath for uint256;\r\n\r\n  event NewAdmin(address indexed newAdmin);\r\n  event NewPendingAdmin(address indexed newPendingAdmin);\r\n  event NewDelay(uint256 indexed newDelay);\r\n  event CancelTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n  event ExecuteTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n  event QueueTransaction(\r\n    bytes32 indexed txHash,\r\n    address indexed target,\r\n    uint256 value,\r\n    string signature,\r\n    bytes data,\r\n    uint256 eta\r\n  );\r\n\r\n  uint256 public constant override GRACE_PERIOD = 14 days;\r\n  uint256 public constant override MINIMUM_DELAY = 2 days;\r\n  uint256 public constant override MAXIMUM_DELAY = 30 days;\r\n\r\n  address public override admin;\r\n  address public override pendingAdmin;\r\n  uint256 public override delay;\r\n\r\n  mapping(bytes32 => bool) public override queuedTransactions;\r\n\r\n  constructor(address admin_, uint256 delay_) public {\r\n    require(\r\n      delay_ >= MINIMUM_DELAY,\r\n      \"Timelock::constructor: Delay must exceed minimum delay.\"\r\n    );\r\n    require(\r\n      delay_ <= MAXIMUM_DELAY,\r\n      \"Timelock::setDelay: Delay must not exceed maximum delay.\"\r\n    );\r\n\r\n    admin = admin_;\r\n    delay = delay_;\r\n  }\r\n\r\n  fallback() external payable {}\r\n\r\n  function setDelay(uint256 delay_) public override {\r\n    require(\r\n      msg.sender == address(this),\r\n      \"Timelock::setDelay: Call must come from Timelock.\"\r\n    );\r\n    require(\r\n      delay_ >= MINIMUM_DELAY,\r\n      \"Timelock::setDelay: Delay must exceed minimum delay.\"\r\n    );\r\n    require(\r\n      delay_ <= MAXIMUM_DELAY,\r\n      \"Timelock::setDelay: Delay must not exceed maximum delay.\"\r\n    );\r\n    delay = delay_;\r\n\r\n    emit NewDelay(delay);\r\n  }\r\n\r\n  function acceptAdmin() public override {\r\n    require(\r\n      msg.sender == pendingAdmin,\r\n      \"Timelock::acceptAdmin: Call must come from pendingAdmin.\"\r\n    );\r\n    admin = msg.sender;\r\n    pendingAdmin = address(0);\r\n\r\n    emit NewAdmin(admin);\r\n  }\r\n\r\n  function setPendingAdmin(address pendingAdmin_) public override {\r\n    require(\r\n      msg.sender == address(this),\r\n      \"Timelock::setPendingAdmin: Call must come from Timelock.\"\r\n    );\r\n    pendingAdmin = pendingAdmin_;\r\n\r\n    emit NewPendingAdmin(pendingAdmin);\r\n  }\r\n\r\n  function queueTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string memory signature,\r\n    bytes memory data,\r\n    uint256 eta\r\n  ) public override returns (bytes32) {\r\n    require(\r\n      msg.sender == admin,\r\n      \"Timelock::queueTransaction: Call must come from admin.\"\r\n    );\r\n    require(\r\n      eta >= getBlockTimestamp().add(delay),\r\n      \"Timelock::queueTransaction: Estimated execution block must satisfy delay.\"\r\n    );\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    queuedTransactions[txHash] = true;\r\n\r\n    emit QueueTransaction(txHash, target, value, signature, data, eta);\r\n    return txHash;\r\n  }\r\n\r\n  function cancelTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string memory signature,\r\n    bytes memory data,\r\n    uint256 eta\r\n  ) public override {\r\n    require(\r\n      msg.sender == admin,\r\n      \"Timelock::cancelTransaction: Call must come from admin.\"\r\n    );\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    queuedTransactions[txHash] = false;\r\n\r\n    emit CancelTransaction(txHash, target, value, signature, data, eta);\r\n  }\r\n\r\n  function executeTransaction(\r\n    address target,\r\n    uint256 value,\r\n    string memory signature,\r\n    bytes memory data,\r\n    uint256 eta\r\n  ) public payable override returns (bytes memory) {\r\n    require(\r\n      msg.sender == admin,\r\n      \"Timelock::executeTransaction: Call must come from admin.\"\r\n    );\r\n\r\n    bytes32 txHash = keccak256(abi.encode(target, value, signature, data, eta));\r\n    require(\r\n      queuedTransactions[txHash],\r\n      \"Timelock::executeTransaction: Transaction hasn't been queued.\"\r\n    );\r\n    require(\r\n      getBlockTimestamp() >= eta,\r\n      \"Timelock::executeTransaction: Transaction hasn't surpassed time lock.\"\r\n    );\r\n    require(\r\n      getBlockTimestamp() <= eta.add(GRACE_PERIOD),\r\n      \"Timelock::executeTransaction: Transaction is stale.\"\r\n    );\r\n\r\n    queuedTransactions[txHash] = false;\r\n\r\n    bytes memory callData;\r\n\r\n    if (bytes(signature).length == 0) {\r\n      callData = data;\r\n    } else {\r\n      callData = abi.encodePacked(bytes4(keccak256(bytes(signature))), data);\r\n    }\r\n\r\n    (bool success, bytes memory returnData) = target.call{value: value}(callData);\r\n    require(\r\n      success,\r\n      \"Timelock::executeTransaction: Transaction execution reverted.\"\r\n    );\r\n\r\n    emit ExecuteTransaction(txHash, target, value, signature, data, eta);\r\n\r\n    return returnData;\r\n  }\r\n\r\n  function getBlockTimestamp() internal view returns (uint256) {\r\n    // solium-disable-next-line security/no-block-members\r\n    return block.timestamp;\r\n  }\r\n}\r\n"
    }
  },
  "settings": {
    "metadata": {
      "useLiteralContent": false
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "id",
          "ast"
        ]
      }
    }
  }
}